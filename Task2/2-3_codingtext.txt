#include <string>
#include <vector>
#include <math.h>

using namespace std;

int solution(int a, int b, int c, int d) {
    int answer = 0;
    
    enum DICE4_STATE { DS_DIFF = 0, DS_TWO_ONE, DS_TWO_TWO, DS_THREE_ONE, DS_SAME };

	// 상태 초기화
	DICE4_STATE emState = DS_DIFF;

	// 조건 체크
	if (((0 < a) && (6 >= a)) && ((0 < b) && (6 >= b)) &&
		((0 < c) && (6 >= c)) && ((0 < d) && (6 >= d)))
	{
		int iValCount[6] = { 0, };
		
		// 입력된 숫자에 대한 Count
		++iValCount[a - 1]; ++iValCount[b - 1]; ++iValCount[c - 1]; ++iValCount[d - 1];

		int iCheckCount = 0;
		int iVal00 = 0, iVal01 = 0, iVal02 = 0;
		for (int i = 5; 0 <= i; --i)
		{
			// 숫자에 입력값이 없는 경우
			if (0 == iValCount[i]) continue;

			int iDiceVal = i + 1;

			// 같은 값이 나온 개수에 따른 상태 및 값 저장
			switch (iValCount[i])
			{
			case 1:
			{
					  if (0 != iVal01)
					  {
						  iVal02 = iDiceVal;			// Count = 1인 수의 2번째 값
					  }
					  else iVal01 = iDiceVal;			// 2번째 이외의 값
			}
				break;
			case 2:
			{
					  if (0 != iVal00) iVal01 = iDiceVal;
					  else iVal00 = iDiceVal;

					  // 상태변경
					  if (DS_TWO_ONE == emState) emState = DS_TWO_TWO;
					  else emState = DS_TWO_ONE;
			}
				break;
			case 3:
			{
					  iVal00 = iDiceVal;

					  emState = DS_THREE_ONE;
			}
				break;
			case 4:
			{
					  iVal00 = iDiceVal;

					  emState = DS_SAME;
			}
				break;
			}

			iCheckCount += iValCount[i];

			// 입력된 값이 모두 확인된경우 루프 종료
			if (4 <= iCheckCount) break;
		}

		// 상태에 따른 결과 계산
		switch (emState)
		{
		case DS_DIFF:		answer = iVal02;									break;
		case DS_TWO_ONE:	answer = iVal01 * iVal02;							break;
		case DS_TWO_TWO:	answer = (iVal00 + iVal01) * abs(iVal00 - iVal01);	break;
		case DS_THREE_ONE:	answer = pow((float)(10 * iVal00 + iVal01), 2);		break;
		case DS_SAME:		answer = 1111 * iVal00;								break;
		}
	}
    
    return answer;
}